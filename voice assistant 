import React, { useState, useEffect } from 'react';
import { Mic, Search, Plus, Home, ShoppingCart, User, Volume2, Check } from 'lucide-react';

const VoiceDukaanAssistant = () => {
  const [currentView, setCurrentView] = useState('customer'); // 'customer', 'admin', 'orderComplete'
  const [isListening, setIsListening] = useState(false);
  const [searchQuery, setSearchQuery] = useState('');
  const [selectedProduct, setSelectedProduct] = useState(null);
  const [selectedPrice, setSelectedPrice] = useState(null);
  const [products, setProducts] = useState([
    {
      id: 1,
      name: 'Parle G Biscuit',
      image: 'https://images.unsplash.com/photo-1599599810769-bcde5a160d32?w=200&h=200&fit=crop',
      prices: [5, 10, 15, 25]
    },
    {
      id: 2,
      name: 'Maggi Noodles',
      image: 'https://images.unsplash.com/photo-1585032226651-759b368d7246?w=200&h=200&fit=crop',
      prices: [12, 24, 36]
    },
    {
      id: 3,
      name: 'Coca Cola',
      image: 'https://images.unsplash.com/photo-1629203851122-3726ecdf080e?w=200&h=200&fit=crop',
      prices: [20, 40, 60]
    },
    {
      id: 4,
      name: 'Britannia Bread',
      image: 'https://images.unsplash.com/photo-1549931319-a545dcf3bc73?w=200&h=200&fit=crop',
      prices: [25, 35, 45]
    }
  ]);

  // Admin form states
  const [newProduct, setNewProduct] = useState({
    name: '',
    image: '',
    prices: ''
  });

  // Speech Recognition setup
  const [recognition, setRecognition] = useState(null);

  useEffect(() => {
    if ('webkitSpeechRecognition' in window || 'SpeechRecognition' in window) {
      const SpeechRecognition = window.SpeechRecognition || window.webkitSpeechRecognition;
      const recog = new SpeechRecognition();
      recog.continuous = false;
      recog.interimResults = false;
      recog.lang = 'hi-IN';
      
      recog.onresult = (event) => {
        const transcript = event.results[0][0].transcript;
        setSearchQuery(transcript);
        setIsListening(false);
        searchProducts(transcript);
      };
      
      recog.onerror = () => {
        setIsListening(false);
      };
      
      recog.onend = () => {
        setIsListening(false);
      };
      
      setRecognition(recog);
    }
  }, []);

  const startListening = () => {
    if (recognition) {
      setIsListening(true);
      recognition.start();
    }
  };

  const searchProducts = (query) => {
    const filtered = products.filter(product => 
      product.name.toLowerCase().includes(query.toLowerCase()) ||
      query.toLowerCase().includes(product.name.toLowerCase().split(' ')[0])
    );
    
    if (filtered.length > 0) {
      setSelectedProduct(filtered[0]);
      setSelectedPrice(null);
    }
  };

  const handleTextSearch = (e) => {
    e.preventDefault();
    if (searchQuery.trim()) {
      searchProducts(searchQuery);
    }
  };

  const selectPrice = (price) => {
    setSelectedPrice(price);
  };

  const completeOrder = () => {
    setCurrentView('orderComplete');
    setTimeout(() => {
      resetCustomerView();
    }, 3000);
  };

  const resetCustomerView = () => {
    setCurrentView('customer');
    setSelectedProduct(null);
    setSelectedPrice(null);
    setSearchQuery('');
  };

  const addProduct = () => {
    if (newProduct.name && newProduct.image && newProduct.prices) {
      const pricesArray = newProduct.prices.split(',').map(p => parseInt(p.trim())).filter(p => !isNaN(p));
      
      const product = {
        id: products.length + 1,
        name: newProduct.name,
        image: newProduct.image,
        prices: pricesArray
      };
      
      setProducts([...products, product]);
      setNewProduct({ name: '', image: '', prices: '' });
      alert('Product Added Successfully! üéâ');
    }
  };

  // Customer View
  const CustomerView = () => (
    <div className="min-h-screen bg-gradient-to-br from-blue-50 to-indigo-100 p-4">
      <div className="max-w-md mx-auto">
        {/* Header */}
        <div className="text-center mb-8 pt-8">
          <div className="bg-white rounded-full w-20 h-20 mx-auto mb-4 flex items-center justify-center shadow-lg">
            <ShoppingCart className="w-10 h-10 text-indigo-600" />
          </div>
          <h1 className="text-2xl font-bold text-gray-800 mb-2">Voice Dukaan Assistant</h1>
          <p className="text-lg text-gray-600">‡§Ü‡§™‡§ï‡•ã ‡§ï‡•ç‡§Ø‡§æ ‡§ö‡§æ‡§π‡§ø‡§è?</p>
        </div>

        {/* Search Section */}
        {!selectedProduct && (
          <div className="bg-white rounded-2xl p-6 shadow-xl mb-6">
            <div className="mb-4">
              <div className="flex gap-2">
                <input
                  type="text"
                  value={searchQuery}
                  onChange={(e) => setSearchQuery(e.target.value)}
                  placeholder="Product ‡§ï‡§æ ‡§®‡§æ‡§Æ ‡§ü‡§æ‡§á‡§™ ‡§ï‡§∞‡•á‡§Ç..."
                  className="flex-1 p-3 border-2 border-gray-200 rounded-xl focus:border-indigo-500 focus:outline-none"
                  onKeyPress={(e) => {
                    if (e.key === 'Enter') {
                      handleTextSearch(e);
                    }
                  }}
                />
                <button
                  onClick={handleTextSearch}
                  className="bg-indigo-600 text-white p-3 rounded-xl hover:bg-indigo-700 transition"
                >
                  <Search className="w-5 h-5" />
                </button>
              </div>
            </div>
            
            <div className="text-center">
              <div className="text-gray-500 mb-3">‡§Ø‡§æ</div>
              <button
                onClick={startListening}
                disabled={isListening}
                className={`w-full py-4 rounded-xl font-semibold text-lg transition ${
                  isListening 
                    ? 'bg-red-500 text-white animate-pulse' 
                    : 'bg-green-500 text-white hover:bg-green-600'
                }`}
              >
                <div className="flex items-center justify-center gap-2">
                  <Mic className="w-6 h-6" />
                  {isListening ? '‡§∏‡•Å‡§® ‡§∞‡§π‡§æ ‡§π‡•Ç‡§Ç...' : 'Voice ‡§∏‡•á ‡§¨‡§§‡§æ‡§è‡§Ç'}
                </div>
              </button>
            </div>
          </div>
        )}

        {/* Product Display */}
        {selectedProduct && !selectedPrice && (
          <div className="bg-white rounded-2xl p-6 shadow-xl mb-6">
            <div className="text-center mb-6">
              <img
                src={selectedProduct.image}
                alt={selectedProduct.name}
                className="w-32 h-32 object-cover rounded-xl mx-auto mb-4 shadow-md"
              />
              <h2 className="text-xl font-bold text-gray-800 mb-2">{selectedProduct.name}</h2>
              <p className="text-gray-600">‡§ï‡§ø‡§∏ price ‡§ï‡§æ ‡§ö‡§æ‡§π‡§ø‡§è?</p>
            </div>
            
            <div className="grid grid-cols-2 gap-3">
              {selectedProduct.prices.map((price, index) => (
                <button
                  key={index}
                  onClick={() => selectPrice(price)}
                  className="bg-indigo-50 border-2 border-indigo-200 text-indigo-700 py-3 px-4 rounded-xl font-semibold hover:bg-indigo-100 transition"
                >
                  ‚Çπ{price}
                </button>
              ))}
            </div>
            
            <button
              onClick={resetCustomerView}
              className="w-full mt-4 py-2 text-gray-600 hover:text-gray-800 transition"
            >
              ‡§µ‡§æ‡§™‡§∏ ‡§ú‡§æ‡§è‡§Ç
            </button>
          </div>
        )}

        {/* Order Summary for Shopkeeper */}
        {selectedProduct && selectedPrice && (
          <div className="bg-white rounded-2xl p-6 shadow-xl">
            <div className="text-center mb-6">
              <div className="bg-green-100 rounded-full w-16 h-16 mx-auto mb-4 flex items-center justify-center">
                <Check className="w-8 h-8 text-green-600" />
              </div>
              <h2 className="text-xl font-bold text-gray-800 mb-4">Order Ready!</h2>
              
              <div className="bg-gray-50 rounded-xl p-4 mb-4">
                <img
                  src={selectedProduct.image}
                  alt={selectedProduct.name}
                  className="w-20 h-20 object-cover rounded-lg mx-auto mb-3"
                />
                <div className="text-lg font-semibold text-gray-800">{selectedProduct.name}</div>
                <div className="text-2xl font-bold text-indigo-600">‚Çπ{selectedPrice}</div>
              </div>
              
              <button
                onClick={completeOrder}
                className="w-full bg-green-500 text-white py-3 rounded-xl font-semibold hover:bg-green-600 transition"
              >
                Order Complete ‡§ï‡§∞‡•á‡§Ç
              </button>
              
              <button
                onClick={resetCustomerView}
                className="w-full mt-2 py-2 text-gray-600 hover:text-gray-800 transition"
              >
                Cancel ‡§ï‡§∞‡•á‡§Ç
              </button>
            </div>
          </div>
        )}

        {/* Admin Button */}
        <div className="fixed bottom-4 right-4">
          <button
            onClick={() => setCurrentView('admin')}
            className="bg-purple-600 text-white p-4 rounded-full shadow-lg hover:bg-purple-700 transition"
          >
            <Plus className="w-6 h-6" />
          </button>
        </div>
      </div>
    </div>
  );

  // Admin View
  const AdminView = () => (
    <div className="min-h-screen bg-gradient-to-br from-purple-50 to-pink-100 p-4">
      <div className="max-w-md mx-auto">
        <div className="text-center mb-8 pt-8">
          <div className="bg-white rounded-full w-20 h-20 mx-auto mb-4 flex items-center justify-center shadow-lg">
            <User className="w-10 h-10 text-purple-600" />
          </div>
          <h1 className="text-2xl font-bold text-gray-800 mb-2">Admin Panel</h1>
          <p className="text-gray-600">‡§®‡§Ø‡§æ Product Add ‡§ï‡§∞‡•á‡§Ç</p>
        </div>

        <div className="bg-white rounded-2xl p-6 shadow-xl">
          <div className="space-y-4">
            <div>
              <label className="block text-gray-700 font-semibold mb-2">Product Name</label>
              <input
                type="text"
                value={newProduct.name}
                onChange={(e) => setNewProduct({...newProduct, name: e.target.value})}
                placeholder="‡§ú‡•à‡§∏‡•á: Parle G Biscuit"
                className="w-full p-3 border-2 border-gray-200 rounded-xl focus:border-purple-500 focus:outline-none"
              />
            </div>
            
            <div>
              <label className="block text-gray-700 font-semibold mb-2">Image URL</label>
              <input
                type="url"
                value={newProduct.image}
                onChange={(e) => setNewProduct({...newProduct, image: e.target.value})}
                placeholder="https://example.com/image.jpg"
                className="w-full p-3 border-2 border-gray-200 rounded-xl focus:border-purple-500 focus:outline-none"
              />
            </div>
            
            <div>
              <label className="block text-gray-700 font-semibold mb-2">Prices (comma separated)</label>
              <input
                type="text"
                value={newProduct.prices}
                onChange={(e) => setNewProduct({...newProduct, prices: e.target.value})}
                placeholder="5,10,15,25"
                className="w-full p-3 border-2 border-gray-200 rounded-xl focus:border-purple-500 focus:outline-none"
              />
            </div>
            
            <button
              onClick={addProduct}
              className="w-full bg-purple-600 text-white py-3 rounded-xl font-semibold hover:bg-purple-700 transition"
            >
              Add Product
            </button>
          </div>
        </div>

        <button
          onClick={() => setCurrentView('customer')}
          className="w-full mt-6 bg-gray-600 text-white py-3 rounded-xl font-semibold hover:bg-gray-700 transition flex items-center justify-center gap-2"
        >
          <Home className="w-5 h-5" />
          Back to Home
        </button>
      </div>
    </div>
  );

  // Order Complete View
  const OrderCompleteView = () => (
    <div className="min-h-screen bg-gradient-to-br from-green-50 to-emerald-100 p-4 flex items-center justify-center">
      <div className="max-w-md mx-auto text-center">
        <div className="bg-white rounded-2xl p-8 shadow-xl">
          <div className="bg-green-100 rounded-full w-24 h-24 mx-auto mb-6 flex items-center justify-center">
            <Check className="w-12 h-12 text-green-600" />
          </div>
          <h1 className="text-2xl font-bold text-gray-800 mb-4">Order Complete!</h1>
          <p className="text-gray-600 mb-6">‡§ß‡§®‡•ç‡§Ø‡§µ‡§æ‡§¶! ‡§Ü‡§™‡§ï‡§æ ‡§∏‡§æ‡§Æ‡§æ‡§® ‡§§‡•à‡§Ø‡§æ‡§∞ ‡§π‡•à‡•§</p>
          <div className="animate-pulse text-green-600 font-semibold">
            Redirecting to home...
          </div>
        </div>
      </div>
    </div>
  );

  return (
    <div className="font-sans">
      {currentView === 'customer' && <CustomerView />}
      {currentView === 'admin' && <AdminView />}
      {currentView === 'orderComplete' && <OrderCompleteView />}
    </div>
  );
};

export default VoiceDukaanAssistant;
